#!/usr/bin/env bash

memory_stats_file='/sys/fs/cgroup/memory/memory.stat'
starting_timestamp="$(date +%s)"

python_watchdog() {
	max_age=3600
	watch_frequency=600
	log_i "Starting python watchdog in the background"
	(
		while true; do
			log_i "Killing old python processes (more than $max_age seconds)..."
			ps -eo pid,etimes,cmd \
     			| awk '$2 > '"$max_age"' && /python/ {print $1}' \
     			| xargs -I % kill -9 % 2> /dev/null
			sleep "$watch_frequency"
		done
	) &
}

start_memory_manager() {
    (
        if [ "$SCRAPER_ENV" == "DEVELOPMENT" ] ; then
            max_mem_mb=1200
        else
            max_mem_mb=1800
        fi

        # Bash does not allow floating point math
        hard_limit_mb=$(( max_mem_mb * 105 / 100 ))

        log_i "This container's RAM usage is limited to $max_mem_mb MiB"
        log_i "Hard limit is $hard_limit_mb MiB"
        max_retry=5
        retry_count=0

        while true ; do
            sleep 0.5
            used_memory_mb=$( awk '$1 == "rss" { printf "%d", $2 / 1024 / 1024 }' $memory_stats_file )
            echo "$used_memory_mb" >> "/opt/scraper/logs/memory_${starting_timestamp}.log"

            if [ "$used_memory_mb" -gt "$hard_limit_mb" ] ; then
                log_e "Hard limit for memory exceeded ($used_memory_mb MiB in use)"
                break
            elif [ "$used_memory_mb" -gt "$max_mem_mb" ] ; then
                if [ "$retry_count" -ge "$max_retry" ] ; then
                    log_e "Failed to reestablish normal memory levels ($used_memory_mb MiB in use)"
                    break
                else
                    retry_count=$(( retry_count + 1 ))
                    log_w "The container is exceeding memory limit usage"
                    log_w "$used_memory_mb / $max_mem_mb MiB in use"
                    log_w "Warning $retry_count out of $max_retry"
                fi
            else
                if [ "$retry_count" -ne 0 ] ; then
                    log_i "Acceptable levels of memory use reestablished"
                fi
                retry_count=0
            fi
        done

        printf '%.0s*\n' {1..10}
        log_e "Memory manager terminating container"
        printf '%.0s*\n' {1..10}
        kill_container
    ) &
}

main() {
    start_memory_manager
    sleep 1

	log_i "You are running this container as $(id)"
    log_i "Starting xvfb virtual display..."
    launch_xvfb
    log_i "Starting window manager..."
    launch_window_manager

	if [ "$SCRAPER_ENV" == "DEVELOPMENT" ] ; then
		log_i "Starting VNC server..."
		run_vnc_server
	fi

	############################################################################
	# Run our app
	############################################################################
	directory="/opt/scraper/"

	log_i "Sleeping for 10 seconds to allow Postgres to init"
	sleep 10

	python_watchdog
	cd "$directory"
	find -maxdepth 1 -regex '.*chrome_profile.*' -type d -exec rm -rf {} +

	# This needs to go unquoted in the command
	unquoted="$random_order"

	while true ; do
		log_i "Running scheduler script..."
		python3 -m scripts.scheduler \
			--sleep_interval "$sleep_interval" \
			--log_file "/opt/scraper/logs/scraper_${starting_timestamp}.log" \
			$unquoted \
			2>&1 | tee -a "/opt/scraper/logs/scraper_${starting_timestamp}.log"
		log_i "Running instructions generated by scheduler script..."
		bash scheduler.sh
		log_i "Sleeping before restarting cycle..."
		sleep 10
	done
}

# https://medium.com/dot-debug/running-chrome-in-a-docker-container-a55e7f4da4a8
# http://www.richud.com/wiki/Ubuntu_Fluxbox_GUI_with_x11vnc_and_Xvfb

launch_xvfb() {
    local xvfbLockFilePath="/tmp/.X1-lock"
    if [ -f "${xvfbLockFilePath}" ]
    then
        log_i "Removing xvfb lock file '${xvfbLockFilePath}'..."
        if ! rm -v -f "${xvfbLockFilePath}"
        then
            log_e "Failed to remove xvfb lock file"
            exit 1
        fi
    fi

    # Set defaults if the user did not specify envs.
    export DISPLAY=${XVFB_DISPLAY:-:1}
    local screen=${XVFB_SCREEN:-0}
    local resolution=${XVFB_RESOLUTION:-1280x960x24}
    local timeout=${XVFB_TIMEOUT:-5}

    # Start and wait for either Xvfb to be fully up or we hit the timeout.
    Xvfb ${DISPLAY} -screen ${screen} ${resolution} \
		>> "/opt/scraper/logs/xvfb_${starting_timestamp}.log" \
		2>> "/opt/scraper/logs/xvfb_${starting_timestamp}.error" &
    local loopCount=0
    until xdpyinfo -display ${DISPLAY} > /dev/null 2>&1
    do
        loopCount=$((loopCount+1))
        sleep 1
        if [ ${loopCount} -gt ${timeout} ]
        then
            log_e "xvfb failed to start"
            exit 1
        fi
    done
}

launch_window_manager() {
    local timeout=${XVFB_TIMEOUT:-5}

    # Start and wait for either fluxbox to be fully up or we hit the timeout.
    fluxbox \
		>> "/opt/scraper/logs/fluxbox_${starting_timestamp}.log" \
		2>> "/opt/scraper/logs/fluxbox_${starting_timestamp}.error" &
    local loopCount=0
    until wmctrl -m > /dev/null 2>&1
    do
        loopCount=$((loopCount+1))
        sleep 1
        if [ ${loopCount} -gt ${timeout} ]
        then
            log_e "fluxbox failed to start"
            exit 1
        fi
    done
}

run_vnc_server() {
    local passwordArgument='-nopw'
	local vnc_server_password='123456'
	local passwordFilePath="${HOME}/.x11vnc.pass"

	if ! x11vnc -storepasswd "${vnc_server_password}" "${passwordFilePath}"
	then
		log_e "Failed to store x11vnc password"
		exit 1
	fi
	passwordArgument=-"-rfbauth ${passwordFilePath}"
	log_i "The VNC server will ask for the password '$vnc_server_password'"

    x11vnc -display ${DISPLAY} -forever ${passwordArgument} \
		>> "/opt/scraper/logs/x11vnc_${starting_timestamp}.log" \
		2>> "/opt/scraper/logs/x11vnc_${starting_timestamp}.error" &
}

log_i() {
    log "[INFO] ${@}"
}

log_w() {
    log "[WARN] ${@}"
}

log_e() {
    log "[ERROR] ${@}"
}

log() {
    echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] [BOOTSTRAP] ${@}" 2>&1 \
    | tee -a "/opt/scraper/logs/scraper_${starting_timestamp}.log"
}

kill_container() {
    kill -15 -1 &
    sleep 2
    kill -9 -1
    exit
}

control_c() {
    echo "Interrupt received... exiting... :("
    kill_container
}

# This script should NOT be run as root, as it is not advisable to run Chrome
# with root privileges.

if [ "$(id -u)" -eq 0 ] ; then
    echo "Can't run as root, terminating..."
    exit
fi

trap control_c SIGINT SIGTERM SIGHUP

main &
wait
