#!/usr/bin/env bash

# Credits for this file go to https://medium.com/dot-debug/running-chrome-in-a-docker-container-a55e7f4da4a8
# Based on: http://www.richud.com/wiki/Ubuntu_Fluxbox_GUI_with_x11vnc_and_Xvfb

# This script should NOT be run as root, as it is not advisable to run Chrome
# with root privileges.

starting_timestamp="$(date +%s)"

python_watchdog() {
	max_age=3600
	watch_frequency=600
	log_i "Starting python watchdog in the background"
	(
		while true; do
			log_i "Killing old python processes (more than $max_age seconds)..."
			ps -eo pid,etimes,cmd \
     			| awk "\$2 > $max_age" \
				| grep 'python'   \
				| sed -r 's/^[^0-9]*([0-9]+).*$/\1/'   \
     			| xargs -I % kill -9 % 2> /dev/null
			sleep "$watch_frequency"
		done
	) &
}

system_snapshot() {
	sys_snapshot_log_file="/var/log/scraper/system_snapshot_${starting_timestamp}.log"
	frequency=60
	echo -e "Starting system_snapshot logger at $(date)" >> "$sys_snapshot_log_file"
	echo -e "We will take snapshots every $frequency seconds\n\n" >> "$sys_snapshot_log_file"
	(
		while true ; do
			echo "--------------------$(date)--------------------" >> "$sys_snapshot_log_file"
			ps -eo pid,cmd,times,rss,%cpu >> "$sys_snapshot_log_file"
			# We can't use a utility like 'free' because that shows stats for host
			awk '$1 == "rss" { mb = $2 / 1000 / 1000 ; print "Resident memory usage: " mb " MB" }' /sys/fs/cgroup/memory/memory.stat >> "$sys_snapshot_log_file"
			sleep $frequency
		done
	) &
}

main() {
	log_i "You are running this container as $(id)"
	system_snapshot
    log_i "Starting xvfb virtual display..."
    launch_xvfb
    log_i "Starting window manager..."
    launch_window_manager

	if [ "$SCRAPER_ENV" == "DEVELOPMENT" ] ; then
		log_i "Starting VNC server..."
		run_vnc_server
	fi

	############################################################################
	# Run our app
	############################################################################
	directory="/opt/scraper/"
	
	log_i "Sleeping for 10 seconds to allow Postgres to init"
	sleep 10

	python_watchdog
	cd "$directory"
	find -maxdepth 1 -regex '.*chrome_profile.*' -type d -exec rm -rf {} +

	# This needs to go unquoted in the command
	unquoted="$random_order"

	while true ; do
		log_i "Running scheduler script..."
		python3 -m scripts.scheduler \
			--sleep_interval "$sleep_interval" \
			--log_file "/var/log/scraper/scraper_${starting_timestamp}.log" \
			$unquoted \
			2>&1 | tee -a "/var/log/scraper/scraper_${starting_timestamp}.log"
		log_i "Running instructions generated by scheduler script..."
		bash jobs/scheduler.sh
		log_i "Sleeping before restarting cycle..."
		sleep 10
	done
}

launch_xvfb() {
    local xvfbLockFilePath="/tmp/.X1-lock"
    if [ -f "${xvfbLockFilePath}" ]
    then
        log_i "Removing xvfb lock file '${xvfbLockFilePath}'..."
        if ! rm -v -f "${xvfbLockFilePath}"
        then
            log_e "Failed to remove xvfb lock file"
            exit 1
        fi
    fi

    # Set defaults if the user did not specify envs.
    export DISPLAY=${XVFB_DISPLAY:-:1}
    local screen=${XVFB_SCREEN:-0}
    local resolution=${XVFB_RESOLUTION:-1280x960x24}
    local timeout=${XVFB_TIMEOUT:-5}

    # Start and wait for either Xvfb to be fully up or we hit the timeout.
    Xvfb ${DISPLAY} -screen ${screen} ${resolution} \
		>> "/var/log/scraper/xvfb_${starting_timestamp}.log" \
		2>> "/var/log/scraper/xvfb_${starting_timestamp}.error" &
    local loopCount=0
    until xdpyinfo -display ${DISPLAY} > /dev/null 2>&1
    do
        loopCount=$((loopCount+1))
        sleep 1
        if [ ${loopCount} -gt ${timeout} ]
        then
            log_e "xvfb failed to start"
            exit 1
        fi
    done
}

launch_window_manager() {
    local timeout=${XVFB_TIMEOUT:-5}

    # Start and wait for either fluxbox to be fully up or we hit the timeout.
    fluxbox \
		>> "/var/log/scraper/fluxbox_${starting_timestamp}.log" \
		2>> "/var/log/scraper/fluxbox_${starting_timestamp}.error" &
    local loopCount=0
    until wmctrl -m > /dev/null 2>&1
    do
        loopCount=$((loopCount+1))
        sleep 1
        if [ ${loopCount} -gt ${timeout} ]
        then
            log_e "fluxbox failed to start"
            exit 1
        fi
    done
}

run_vnc_server() {
    local passwordArgument='-nopw'
	local vnc_server_password='123456'
	local passwordFilePath="${HOME}/.x11vnc.pass"

	if ! x11vnc -storepasswd "${vnc_server_password}" "${passwordFilePath}"
	then
		log_e "Failed to store x11vnc password"
		exit 1
	fi
	passwordArgument=-"-rfbauth ${passwordFilePath}"
	log_i "The VNC server will ask for the password '$vnc_server_password'"

    x11vnc -display ${DISPLAY} -forever ${passwordArgument} \
		>> "/var/log/scraper/x11vnc_${starting_timestamp}.log" \
		2>> "/var/log/scraper/x11vnc_${starting_timestamp}.error" &
}

log_i() {
    log "[INFO] ${@}"
}

log_w() {
    log "[WARN] ${@}"
}

log_e() {
    log "[ERROR] ${@}"
}

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [BOOTSTRAP] ${@}" 2>&1 | tee -a "/var/log/scraper/scraper_${starting_timestamp}.log"
}

control_c() {
    echo "Interrupt received... exiting... :("
    exit
}

trap control_c SIGINT SIGTERM SIGHUP

main

exit
