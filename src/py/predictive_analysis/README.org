* YEAR AP - Predictive Analysis

The goal of the predictive analysis component of YEAP AP is to gain insights
on FEE's data through the use of machine learning techniques.

* Project Structure

The predictive analysis component is structured as a Python library
and a set of experiments. The library contains the generic code, and the
experiments contains the specific structures for a particular predictive
experiment.

** Experiments

On this project, an experiment means a Jupyter notebook that reads data from
YEAR AP's database, runs some data processing, and reports on the result of
the data processing. The data processing usually involves training and
evaluating a machine learning model on the data.

Each experiment is a directory containing, in general, four files:

- main.py :: defines the experiment setup
- report_writer.py :: writes the report based on the result of the test
- config.json :: configurations (such as database connection) required by the test
- report.ipynb :: the Jupyter notebook summarizing the objective and the conclusions of the experiment.

** The Python library

The Python library is structured into two modules: ~year_ap_predictive~ and
~data_sources~. The former defines the abstractions and data manipulation
used by all experiments, the later defines data sources shared by some but
not by all experiments.

*** ~year_ap_predictive~

This module contains the following sub-modules:

- library_types.py :: defines types used by the library
- data_sources.py :: defines the data source interface
- predictive_framework.py :: extracts data from data sources, group it, train, and evaluate models
- config_util.py :: utility methods used to read configuration files throughout the experiments

*** ~data_sources~

Classes on this package contain code shared by a set of related experiments.
All classes defined here implement the DataSource interface defined on
~year_ap_predictive.data_sources~.

* Dependencies

This project relies mainly on:

- sklearn :: for machine learning
- matplotlib :: for plotting data
- Jupyter Notebook :: for experiment presentation

For a complete list of dependencies, check the file ~Pipfile~.

* Setting up the Project

This Python project was setup with
[[https://github.com/kennethreitz/pipenv][pipenv]] - the officially
recommended Python packaging system.

To setup the Python environment, run the following commands on this
directory:

#+BEGIN_SRC shell
    pipenv install
    pipenv run python setup.py install
#+END_SRC

Note that you may also need to install the "python3-tk" package. This is
required by "matplotlib", a core dependency of this project, in order to
display plots on GUI widgets. In Ubuntu, you can install "tk" by running:

#+BEGIN_SRC shell
    sudo apt-get install python3-tk
#+END_SRC

* Running the experiments

In order to run the experiment:

- activate the Python environment with

  #+BEGIN_SRC shell
  pipenv shell
  #+END_SRC

- "cd" into the experiment's directory (which is a subdirectory of
  ~experiments/~).
- edit the configuration file
- run experiment with:

  #+BEGIN_SRC shell
  python main.py
  #+END_SRC

Note that the provided experiments share the same configuration file, so it
is in the ~experiments/~ directory.

** Jupyter Notebooks

The experiments are also available as Jupyter Notebooks. To open then:

- Start a Jupyter server from within you pipenv environment (run from this
  directory):

  #+BEGIN_SRC shell
  pipenv run jupyter notebook
  #+END_SRC

- Open you browser on ~localhost:8888~

- Navigate the project file tree to ~experiment/linear_popularity/~

- Enter any of the directories there (each one is an experiment) and open the
  file with a ~.ipynb~ extension.
